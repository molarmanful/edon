LZW={compress:function(r,o,f,n,e,s,t,u){for(o={},f=n=256;n--;)o[String.fromCharCode(n)]=n;for(e=s=[];t=r[++n];)e=o[u=e+t]?u:(s.push(o[e]),o[u]=f++,t);return s.push(o[e]),s},decompress:function(r,o,f,n,e,s,t,u){for(o=[],f=n=256,e=String.fromCharCode;n--;)o[n]=e(n);for(e=s=e(r[n=0]);(u=r[++n])<=f;)t=o[u]||e+e[0],o[f++]=e+t[0],s+=e=t;return s}};

h=require('http')
fs=require('fs')
vm=require('vm')
url=require('url')
path=require('path')
punycode=require('punycode')
crypto=require('crypto')
StringDecoder=require('string_decoder').StringDecoder
querystring=require('querystring')
ex=require('express')
ts=require('tosource')
exec=require('child_process').exec
b=require('babel-core')
app=ex()

_eval=(x,z)=>{
	try{
		z(vm.runInNewContext(x,{
			Buffer:Buffer,
			clearImmediate:clearImmediate,
			clearInterval:clearInterval,
			clearTimeout:clearTimeout,
			setImmediate:setImmediate,
			setTimeout:setTimeout,
			setInterval:setInterval,
			crypto:crypto,
			punycode:punycode,
			querystring:querystring,
			StringDecoder:StringDecoder,
			url:url,
			vm:vm
		},{timeout:1000}))
	}catch(e){
			try{
				z(vm.runInNewContext(b.transform(x,{presets:['stage-0']}).code,{
					Buffer:Buffer,
					clearImmediate:clearImmediate,
					clearInterval:clearInterval,
					clearTimeout:clearTimeout,
					setImmediate:setImmediate,
					setTimeout:setTimeout,
					setInterval:setInterval,
					crypto:crypto,
					punycode:punycode,
					querystring:querystring,
					StringDecoder:StringDecoder,
					url:url,
					vm:vm
				},{timeout:1000}))
			}catch(E){z(E.toString())}
	}
}

app.use(ex.static(__dirname+'/public'))
app.get('/eval/:x',(x,y)=>{
	_eval(LZW.decompress([...decodeURIComponent(unescape(Buffer(x.params.x,'base64').toString()))].map(i=>i.charCodeAt())),o=>{
		y.setHeader('Content-Type','application/json')
		y.json({r:ts(o)})
	})
})
app.listen(process.env.OPENSHIFT_NODEJS_PORT||8080,process.env.OPENSHIFT_NODEJS_IP||'127.0.0.1')
console.log(process.env.OPENSHIFT_NODEJS_VERSION_URL)